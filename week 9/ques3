#include <iostream>
#include <queue>
#include <vector>
using namespace std;
int minComputationCost(int n, vector<int>& files) {
    priority_queue<int, vector<int>, greater<int>> pq(files.begin(), files.end());
    int cost = 0;
    while (pq.size() > 1) {
        int file1 = pq.top();
        pq.pop();
        int file2 = pq.top();
        pq.pop();
        int mergedSize = file1 + file2;
        pq.push(mergedSize);
        cost += mergedSize;
    }    
    return cost;
}
int main() {
    int n;
    cin >> n;   
    vector<int> files(n);
    for (int i = 0; i < n; i++) {
        cin >> files[i];
    }   
    int minCost = minComputationCost(n, files);   
    cout << "Minimum computation cost required: " << minCost << endl;   
    return 0;
}
