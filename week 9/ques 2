#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct Item {
    int index;
    double weight;
    double value;
};
bool compare(Item a, Item b) {
    double r1 = a.value / a.weight;
    double r2 = b.value / b.weight;
    return r1 > r2;
}
pair<double, vector<pair<int, double>>> fractionalKnapsack(int N, vector<double>& weights, vector<double>& values, double capacity) {
    vector<Item> items(N);
    for (int i = 0; i < N; i++) {
        items[i] = {i + 1, weights[i], values[i]}; 
    sort(items.begin(), items.end(), compare);
    double totalValue = 0.0;
    double remainingCapacity = capacity;
    vector<pair<int, double>> selectedItems;
    for (int i = 0; i < N; i++) {
        if (remainingCapacity >= items[i].weight) {
            totalValue += items[i].value;
            remainingCapacity -= items[i].weight;
            selectedItems.push_back({items[i].index, 1.0});
        } else {
            double fraction = remainingCapacity / items[i].weight;
            totalValue += items[i].value * fraction;
            selectedItems.push_back({items[i].index, fraction});
            break;
        }
    }
    return {totalValue, selectedItems};
}
int main() {
    int N;
    cin >> N;
    vector<double> weights(N);
    vector<double> values(N);
    for (int i = 0; i < N; i++) {
        cin >> weights[i];
    }   
    for (int i = 0; i < N; i++) {
        cin >> values[i];
    } 
    double capacity;
    cin >> capacity;
    pair<double, vector<pair<int, double>>> result = fractionalKnapsack(N, weights, values, capacity);
    cout << "Maximum value: " << result.first << endl;
    cout << "Selected items (index, fraction):" << endl;
    for (auto item : result.second) {
        cout << "Item " << item.first << ": " << item.second << endl;
    }
    return 0;
}
